        -:    0:Source:Allocator.h
        -:    0:Graph:TestAllocator.gcno
        -:    0:Data:TestAllocator.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// ------------------------------
        -:    2:// projects/allocator/Allocator.h
        -:    3:// Copyright (C) 2015
        -:    4:// Glenn P. Downing
        -:    5:// ------------------------------
        -:    6:
        -:    7:#ifndef Allocator_h
        -:    8:#define Allocator_h
        -:    9:
        -:   10:// --------
        -:   11:// includes
        -:   12:// --------
        -:   13:
        -:   14:#include <cassert>   // assert
        -:   15:#include <cstddef>   // ptrdiff_t, size_t
        -:   16:#include <new>       // bad_alloc, new
        -:   17:#include <stdexcept> // invalid_argument
        -:   18:#include <string>
        -:   19:#include "gtest/gtest_prod.h"
        -:   20:
        -:   21:// ---------
        -:   22:// Allocator
        -:   23:// ---------
        -:   24:
        -:   25:template <typename T, std::size_t N>
        -:   26:class Allocator {
        -:   27:    public:
        -:   28:        // --------
        -:   29:        // typedefs
        -:   30:        // --------
        -:   31:
        -:   32:        typedef T                 value_type;
        -:   33:
        -:   34:        typedef std::size_t       size_type;
        -:   35:        typedef std::ptrdiff_t    difference_type;
        -:   36:
        -:   37:        typedef       value_type*       pointer;
        -:   38:        typedef const value_type* const_pointer;
        -:   39:
        -:   40:        typedef       value_type&       reference;
        -:   41:        typedef const value_type& const_reference;
        -:   42:
        -:   43:    public:
        -:   44:        // -----------
        -:   45:        // operator ==
        -:   46:        // -----------
        -:   47:
        -:   48:        friend bool operator == (const Allocator&, const Allocator&) {
        -:   49:            return true;}                                              // this is correct
        -:   50:
        -:   51:        // -----------
        -:   52:        // operator !=
        -:   53:        // -----------
        -:   54:
        -:   55:        friend bool operator != (const Allocator& lhs, const Allocator& rhs) {
        -:   56:            return !(lhs == rhs);}
        -:   57:
        -:   58:    private:
        -:   59:        // ----
        -:   60:        // data
        -:   61:        // ----
        -:   62:
        -:   63:        char a[N];
        -:   64:
        -:   65:        // -----
        -:   66:        // valid
        -:   67:        // -----
        -:   68:
        -:   69:        /**
        -:   70:         * O(1) in space
        -:   71:         * O(n) in time
        -:   72:         * <your documentation>
        -:   73:         */
function _ZNK9AllocatorIdLm100EE5validEv called 56 returned 100% blocks executed 21%
function _ZNK9AllocatorIdLm16EE5validEv called 4 returned 75% blocks executed 30%
function _ZNK9AllocatorIiLm36EE5validEv called 5 returned 100% blocks executed 21%
function _ZNK9AllocatorIiLm68EE5validEv called 5 returned 100% blocks executed 21%
function _ZNK9AllocatorIiLm16EE5validEv called 2 returned 100% blocks executed 21%
function _ZNK9AllocatorIiLm60EE5validEv called 6 returned 100% blocks executed 21%
function _ZNK9AllocatorIiLm11EE5validEv called 0 returned 0% blocks executed 0%
function _ZNK9AllocatorIiLm13EE5validEv called 1 returned 100% blocks executed 17%
function _ZNK9AllocatorIiLm12EE5validEv called 16 returned 81% blocks executed 47%
function _ZNK9AllocatorIiLm200EE5validEv called 1 returned 100% blocks executed 17%
function _ZNK9AllocatorIiLm100EE5validEv called 98 returned 100% blocks executed 21%
      194:   74:        bool valid () const {
      194:   75:            int i = 0;
      712:   76:            while (i < N){
branch  0 taken 53%
branch  1 taken 47% (fallthrough)
branch  2 taken 57%
branch  3 taken 43% (fallthrough)
branch  4 taken 62%
branch  5 taken 38% (fallthrough)
branch  6 taken 62%
branch  7 taken 38% (fallthrough)
branch  8 taken 50%
branch  9 taken 50% (fallthrough)
branch 10 taken 71%
branch 11 taken 29% (fallthrough)
branch 12 never executed
branch 13 never executed
branch 14 taken 50%
branch 15 taken 50% (fallthrough)
branch 16 taken 55%
branch 17 taken 45% (fallthrough)
branch 18 taken 50%
branch 19 taken 50% (fallthrough)
branch 20 taken 68%
branch 21 taken 32% (fallthrough)
      328:   77:                int s = (*this)[i];
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 never executed
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
call   10 returned 100%
      328:   78:                if (s == 0){ // invalid sentinel value
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
branch 12 never executed
branch 13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
branch 16 taken 6% (fallthrough)
branch 17 taken 94%
branch 18 taken 0% (fallthrough)
branch 19 taken 100%
branch 20 taken 0% (fallthrough)
branch 21 taken 100%
        1:   79:                    throw std::logic_error("Invalid sentinal value");
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
branch 33 never executed
branch 34 never executed
call   35 never executed
branch 36 never executed
branch 37 never executed
call   38 never executed
call   39 never executed
call   40 never executed
call   41 never executed
call   42 never executed
call   43 never executed
call   44 never executed
call   45 never executed
call   46 never executed
call   47 never executed
branch 48 never executed
branch 49 never executed
call   50 never executed
branch 51 never executed
branch 52 never executed
call   53 never executed
call   54 never executed
call   55 never executed
call   56 never executed
call   57 never executed
call   58 never executed
call   59 never executed
call   60 never executed
call   61 never executed
call   62 never executed
branch 63 never executed
branch 64 never executed
call   65 never executed
branch 66 never executed
branch 67 never executed
call   68 never executed
call   69 never executed
call   70 never executed
call   71 never executed
call   72 never executed
call   73 never executed
call   74 never executed
call   75 never executed
call   76 never executed
call   77 never executed
branch 78 never executed
branch 79 never executed
call   80 never executed
branch 81 never executed
branch 82 never executed
call   83 never executed
call   84 never executed
call   85 never executed
call   86 never executed
call   87 never executed
call   88 never executed
call   89 never executed
call   90 never executed
call   91 never executed
call   92 never executed
branch 93 never executed
branch 94 never executed
call   95 never executed
branch 96 never executed
branch 97 never executed
call   98 never executed
call   99 never executed
call   100 never executed
call   101 never executed
call   102 never executed
call   103 never executed
call   104 never executed
call   105 never executed
call   106 never executed
call   107 never executed
branch 108 never executed
branch 109 never executed
call   110 never executed
branch 111 never executed
branch 112 never executed
call   113 never executed
call   114 never executed
call   115 never executed
call   116 never executed
call   117 never executed
call   118 never executed
call   119 never executed
call   120 returned 100%
call   121 returned 100%
call   122 returned 100%
branch 123 taken 100% (fallthrough)
branch 124 taken 0% (throw)
call   125 returned 100%
branch 126 taken 100% (fallthrough)
branch 127 taken 0% (throw)
call   128 returned 100%
call   129 returned 100%
call   130 returned 0%
call   131 never executed
call   132 never executed
call   133 never executed
call   134 never executed
call   135 never executed
call   136 never executed
call   137 never executed
branch 138 never executed
branch 139 never executed
call   140 never executed
branch 141 never executed
branch 142 never executed
call   143 never executed
call   144 never executed
call   145 never executed
call   146 never executed
call   147 never executed
call   148 never executed
call   149 never executed
call   150 never executed
call   151 never executed
call   152 never executed
branch 153 never executed
branch 154 never executed
call   155 never executed
branch 156 never executed
branch 157 never executed
call   158 never executed
call   159 never executed
call   160 never executed
call   161 never executed
call   162 never executed
call   163 never executed
call   164 never executed
        -:   80:                    return false;
        -:   81:                }
      327:   82:                else if (s < 0) {  //skips past allocated block
branch  0 taken 77% (fallthrough)
branch  1 taken 23%
branch  2 taken 25% (fallthrough)
branch  3 taken 75%
branch  4 taken 50% (fallthrough)
branch  5 taken 50%
branch  6 taken 50% (fallthrough)
branch  7 taken 50%
branch  8 taken 50% (fallthrough)
branch  9 taken 50%
branch 10 taken 73% (fallthrough)
branch 11 taken 27%
branch 12 never executed
branch 13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
branch 16 taken 40% (fallthrough)
branch 17 taken 60%
branch 18 taken 0% (fallthrough)
branch 19 taken 100%
branch 20 taken 54% (fallthrough)
branch 21 taken 46%
      188:   83:                    int r = (*this)[i - s + sizeof(int)];
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 never executed
call    7 never executed
call    8 returned 100%
call    9 never executed
call   10 returned 100%
      188:   84:                    if (s != r){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 taken 17% (fallthrough)
branch 17 taken 83%
branch 18 never executed
branch 19 never executed
branch 20 taken 0% (fallthrough)
branch 21 taken 100%
        1:   85:                        throw std::logic_error("Sentinels don't match");
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
branch 33 never executed
branch 34 never executed
call   35 never executed
branch 36 never executed
branch 37 never executed
call   38 never executed
call   39 never executed
call   40 never executed
call   41 never executed
call   42 never executed
call   43 never executed
call   44 never executed
call   45 never executed
call   46 never executed
call   47 never executed
branch 48 never executed
branch 49 never executed
call   50 never executed
branch 51 never executed
branch 52 never executed
call   53 never executed
call   54 never executed
call   55 never executed
call   56 never executed
call   57 never executed
call   58 never executed
call   59 never executed
call   60 never executed
call   61 never executed
call   62 never executed
branch 63 never executed
branch 64 never executed
call   65 never executed
branch 66 never executed
branch 67 never executed
call   68 never executed
call   69 never executed
call   70 never executed
call   71 never executed
call   72 never executed
call   73 never executed
call   74 never executed
call   75 never executed
call   76 never executed
call   77 never executed
branch 78 never executed
branch 79 never executed
call   80 never executed
branch 81 never executed
branch 82 never executed
call   83 never executed
call   84 never executed
call   85 never executed
call   86 never executed
call   87 never executed
call   88 never executed
call   89 never executed
call   90 never executed
call   91 never executed
call   92 never executed
branch 93 never executed
branch 94 never executed
call   95 never executed
branch 96 never executed
branch 97 never executed
call   98 never executed
call   99 never executed
call   100 never executed
call   101 never executed
call   102 never executed
call   103 never executed
call   104 never executed
call   105 never executed
call   106 never executed
call   107 never executed
branch 108 never executed
branch 109 never executed
call   110 never executed
branch 111 never executed
branch 112 never executed
call   113 never executed
call   114 never executed
call   115 never executed
call   116 never executed
call   117 never executed
call   118 never executed
call   119 never executed
call   120 returned 100%
call   121 returned 100%
call   122 returned 100%
branch 123 taken 100% (fallthrough)
branch 124 taken 0% (throw)
call   125 returned 100%
branch 126 taken 100% (fallthrough)
branch 127 taken 0% (throw)
call   128 returned 100%
call   129 returned 100%
call   130 returned 0%
call   131 never executed
call   132 never executed
call   133 never executed
call   134 never executed
call   135 never executed
call   136 never executed
call   137 never executed
branch 138 never executed
branch 139 never executed
call   140 never executed
branch 141 never executed
branch 142 never executed
call   143 never executed
call   144 never executed
call   145 never executed
call   146 never executed
call   147 never executed
call   148 never executed
call   149 never executed
call   150 never executed
call   151 never executed
call   152 never executed
branch 153 never executed
branch 154 never executed
call   155 never executed
branch 156 never executed
branch 157 never executed
call   158 never executed
call   159 never executed
call   160 never executed
call   161 never executed
call   162 never executed
call   163 never executed
call   164 never executed
        -:   86:                        return false; // make sure that both sentinels match
        -:   87:                    }
      187:   88:                    i += -s + (2 * sizeof(int)); // increment i past second sentinel, to the sentinel of the next block
        -:   89:                }
        -:   90:                //checks unallocated block to make sure that there is enough 
        -:   91:                //space for two sentinels and at least 1 T
      139:   92:                else if (s > 0) {  
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 100% (fallthrough)
branch  9 taken 0%
branch 10 taken 100% (fallthrough)
branch 11 taken 0%
branch 12 never executed
branch 13 never executed
branch 14 taken 100% (fallthrough)
branch 15 taken 0%
branch 16 taken 100% (fallthrough)
branch 17 taken 0%
branch 18 taken 100% (fallthrough)
branch 19 taken 0%
branch 20 taken 100% (fallthrough)
branch 21 taken 0%
      139:   93:                    if (s < sizeof(T)){ // if block is too small, return false, block is invalid
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 33% (fallthrough)
branch  3 taken 67%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
branch 12 never executed
branch 13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
branch 16 taken 0% (fallthrough)
branch 17 taken 100%
branch 18 taken 0% (fallthrough)
branch 19 taken 100%
branch 20 taken 0% (fallthrough)
branch 21 taken 100%
        1:   94:                        throw std::logic_error("Block too small");
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 returned 100%
call   16 returned 100%
call   17 returned 100%
branch 18 taken 100% (fallthrough)
branch 19 taken 0% (throw)
call   20 returned 100%
branch 21 taken 100% (fallthrough)
branch 22 taken 0% (throw)
call   23 returned 100%
call   24 returned 100%
call   25 returned 0%
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
branch 33 never executed
branch 34 never executed
call   35 never executed
branch 36 never executed
branch 37 never executed
call   38 never executed
call   39 never executed
call   40 never executed
call   41 never executed
call   42 never executed
call   43 never executed
call   44 never executed
call   45 never executed
call   46 never executed
call   47 never executed
branch 48 never executed
branch 49 never executed
call   50 never executed
branch 51 never executed
branch 52 never executed
call   53 never executed
call   54 never executed
call   55 never executed
call   56 never executed
call   57 never executed
call   58 never executed
call   59 never executed
call   60 never executed
call   61 never executed
call   62 never executed
branch 63 never executed
branch 64 never executed
call   65 never executed
branch 66 never executed
branch 67 never executed
call   68 never executed
call   69 never executed
call   70 never executed
call   71 never executed
call   72 never executed
call   73 never executed
call   74 never executed
call   75 never executed
call   76 never executed
call   77 never executed
branch 78 never executed
branch 79 never executed
call   80 never executed
branch 81 never executed
branch 82 never executed
call   83 never executed
call   84 never executed
call   85 never executed
call   86 never executed
call   87 never executed
call   88 never executed
call   89 never executed
call   90 never executed
call   91 never executed
call   92 never executed
branch 93 never executed
branch 94 never executed
call   95 never executed
branch 96 never executed
branch 97 never executed
call   98 never executed
call   99 never executed
call   100 never executed
call   101 never executed
call   102 never executed
call   103 never executed
call   104 never executed
call   105 never executed
call   106 never executed
call   107 never executed
branch 108 never executed
branch 109 never executed
call   110 never executed
branch 111 never executed
branch 112 never executed
call   113 never executed
call   114 never executed
call   115 never executed
call   116 never executed
call   117 never executed
call   118 never executed
call   119 never executed
call   120 never executed
call   121 never executed
call   122 never executed
branch 123 never executed
branch 124 never executed
call   125 never executed
branch 126 never executed
branch 127 never executed
call   128 never executed
call   129 never executed
call   130 never executed
call   131 never executed
call   132 never executed
call   133 never executed
call   134 never executed
call   135 never executed
call   136 never executed
call   137 never executed
branch 138 never executed
branch 139 never executed
call   140 never executed
branch 141 never executed
branch 142 never executed
call   143 never executed
call   144 never executed
call   145 never executed
call   146 never executed
call   147 never executed
call   148 never executed
call   149 never executed
call   150 never executed
call   151 never executed
call   152 never executed
branch 153 never executed
branch 154 never executed
call   155 never executed
branch 156 never executed
branch 157 never executed
call   158 never executed
call   159 never executed
call   160 never executed
call   161 never executed
call   162 never executed
call   163 never executed
call   164 never executed
        -:   95:                        return false;
        -:   96:                    }
        -:   97:                    else{
      138:   98:                        int q = (*this)[i + s + sizeof(int)];
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 never executed
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
call   10 returned 100%
      138:   99:                        if(s != q){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
branch 12 never executed
branch 13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
branch 16 taken 11% (fallthrough)
branch 17 taken 89%
branch 18 taken 0% (fallthrough)
branch 19 taken 100%
branch 20 taken 0% (fallthrough)
branch 21 taken 100%
        1:  100:                            throw std::logic_error("Sentinels not matching");
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
branch 33 never executed
branch 34 never executed
call   35 never executed
branch 36 never executed
branch 37 never executed
call   38 never executed
call   39 never executed
call   40 never executed
call   41 never executed
call   42 never executed
call   43 never executed
call   44 never executed
call   45 never executed
call   46 never executed
call   47 never executed
branch 48 never executed
branch 49 never executed
call   50 never executed
branch 51 never executed
branch 52 never executed
call   53 never executed
call   54 never executed
call   55 never executed
call   56 never executed
call   57 never executed
call   58 never executed
call   59 never executed
call   60 never executed
call   61 never executed
call   62 never executed
branch 63 never executed
branch 64 never executed
call   65 never executed
branch 66 never executed
branch 67 never executed
call   68 never executed
call   69 never executed
call   70 never executed
call   71 never executed
call   72 never executed
call   73 never executed
call   74 never executed
call   75 never executed
call   76 never executed
call   77 never executed
branch 78 never executed
branch 79 never executed
call   80 never executed
branch 81 never executed
branch 82 never executed
call   83 never executed
call   84 never executed
call   85 never executed
call   86 never executed
call   87 never executed
call   88 never executed
call   89 never executed
call   90 never executed
call   91 never executed
call   92 never executed
branch 93 never executed
branch 94 never executed
call   95 never executed
branch 96 never executed
branch 97 never executed
call   98 never executed
call   99 never executed
call   100 never executed
call   101 never executed
call   102 never executed
call   103 never executed
call   104 never executed
call   105 never executed
call   106 never executed
call   107 never executed
branch 108 never executed
branch 109 never executed
call   110 never executed
branch 111 never executed
branch 112 never executed
call   113 never executed
call   114 never executed
call   115 never executed
call   116 never executed
call   117 never executed
call   118 never executed
call   119 never executed
call   120 returned 100%
call   121 returned 100%
call   122 returned 100%
branch 123 taken 100% (fallthrough)
branch 124 taken 0% (throw)
call   125 returned 100%
branch 126 taken 100% (fallthrough)
branch 127 taken 0% (throw)
call   128 returned 100%
call   129 returned 100%
call   130 returned 0%
call   131 never executed
call   132 never executed
call   133 never executed
call   134 never executed
call   135 never executed
call   136 never executed
call   137 never executed
branch 138 never executed
branch 139 never executed
call   140 never executed
branch 141 never executed
branch 142 never executed
call   143 never executed
call   144 never executed
call   145 never executed
call   146 never executed
call   147 never executed
call   148 never executed
call   149 never executed
call   150 never executed
call   151 never executed
call   152 never executed
branch 153 never executed
branch 154 never executed
call   155 never executed
branch 156 never executed
branch 157 never executed
call   158 never executed
call   159 never executed
call   160 never executed
call   161 never executed
call   162 never executed
call   163 never executed
call   164 never executed
        -:  101:                            return false; // both sentinals for this block should match
        -:  102:                        }
      137:  103:                        i += s + (2 * sizeof(int)); // increment i to next block
        -:  104:                    }
        -:  105:                }
        -:  106:                // i should not be greater than N, once we've accounted for all blocks, i should be equal to N
      324:  107:                if (i > N){ 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
branch 12 never executed
branch 13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
branch 16 taken 0% (fallthrough)
branch 17 taken 100%
branch 18 taken 0% (fallthrough)
branch 19 taken 100%
branch 20 taken 0% (fallthrough)
branch 21 taken 100%
    #####:  108:                    throw std::logic_error("Out of bounds");
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
branch 31 never executed
branch 32 never executed
call   33 never executed
branch 34 never executed
branch 35 never executed
call   36 never executed
call   37 never executed
call   38 never executed
call   39 never executed
call   40 never executed
call   41 never executed
call   42 never executed
call   43 never executed
call   44 never executed
branch 45 never executed
branch 46 never executed
call   47 never executed
branch 48 never executed
branch 49 never executed
call   50 never executed
call   51 never executed
call   52 never executed
call   53 never executed
call   54 never executed
call   55 never executed
call   56 never executed
call   57 never executed
call   58 never executed
branch 59 never executed
branch 60 never executed
call   61 never executed
branch 62 never executed
branch 63 never executed
call   64 never executed
call   65 never executed
call   66 never executed
call   67 never executed
call   68 never executed
call   69 never executed
call   70 never executed
call   71 never executed
call   72 never executed
branch 73 never executed
branch 74 never executed
call   75 never executed
branch 76 never executed
branch 77 never executed
call   78 never executed
call   79 never executed
call   80 never executed
call   81 never executed
call   82 never executed
call   83 never executed
call   84 never executed
call   85 never executed
call   86 never executed
branch 87 never executed
branch 88 never executed
call   89 never executed
branch 90 never executed
branch 91 never executed
call   92 never executed
call   93 never executed
call   94 never executed
call   95 never executed
call   96 never executed
call   97 never executed
call   98 never executed
call   99 never executed
call   100 never executed
branch 101 never executed
branch 102 never executed
call   103 never executed
branch 104 never executed
branch 105 never executed
call   106 never executed
call   107 never executed
call   108 never executed
call   109 never executed
call   110 never executed
call   111 never executed
call   112 never executed
call   113 never executed
call   114 never executed
branch 115 never executed
branch 116 never executed
call   117 never executed
branch 118 never executed
branch 119 never executed
call   120 never executed
call   121 never executed
call   122 never executed
call   123 never executed
call   124 never executed
call   125 never executed
call   126 never executed
call   127 never executed
call   128 never executed
branch 129 never executed
branch 130 never executed
call   131 never executed
branch 132 never executed
branch 133 never executed
call   134 never executed
call   135 never executed
call   136 never executed
call   137 never executed
call   138 never executed
call   139 never executed
call   140 never executed
call   141 never executed
call   142 never executed
branch 143 never executed
branch 144 never executed
call   145 never executed
branch 146 never executed
branch 147 never executed
call   148 never executed
call   149 never executed
call   150 never executed
call   151 never executed
call   152 never executed
call   153 never executed
        -:  109:                    return false;
        -:  110:                }
        -:  111:            }
      190:  112:            return true;
        -:  113:        }
        -:  114:
        -:  115:        /**
        -:  116:         * O(1) in space
        -:  117:         * O(1) in time
        -:  118:         * <your documentation>
        -:  119:         * https://code.google.com/p/googletest/wiki/AdvancedGuide#Private_Class_Members
        -:  120:         */
        -:  121:        FRIEND_TEST(TestAllocator2, index);
function _ZN9AllocatorIdLm100EEixEi called 38 returned 100% blocks executed 100%
function _ZN9AllocatorIdLm16EEixEi called 7 returned 100% blocks executed 100%
function _ZN9AllocatorIiLm36EEixEi called 20 returned 100% blocks executed 100%
function _ZN9AllocatorIiLm68EEixEi called 20 returned 100% blocks executed 100%
function _ZN9AllocatorIiLm16EEixEi called 5 returned 100% blocks executed 100%
function _ZN9AllocatorIiLm60EEixEi called 27 returned 100% blocks executed 100%
function _ZN9AllocatorIiLm11EEixEi called 0 returned 0% blocks executed 0%
function _ZN9AllocatorIiLm13EEixEi called 2 returned 100% blocks executed 100%
function _ZN9AllocatorIiLm12EEixEi called 31 returned 100% blocks executed 100%
function _ZN9AllocatorIiLm200EEixEi called 2 returned 100% blocks executed 100%
function _ZN9AllocatorIiLm100EEixEi called 246 returned 100% blocks executed 100%
      398:  122:        int& operator [] (int i) {
      398:  123:            return *reinterpret_cast<int*>(&a[i]);}
        -:  124:
        -:  125:    public:
        -:  126:        // ------------
        -:  127:        // constructors
        -:  128:        // ------------
        -:  129:        /**
        -:  130:         * O(1) in space
        -:  131:         * O(1) in time
        -:  132:         * throw a bad_alloc exception, if N is less than sizeof(T) + (2 * sizeof(int))
        -:  133:         */
function _ZN9AllocatorIdLm100EEC2Ev called 4 returned 100% blocks executed 60%
function _ZN9AllocatorIdLm16EEC2Ev called 1 returned 100% blocks executed 60%
function _ZN9AllocatorIiLm36EEC2Ev called 1 returned 100% blocks executed 60%
function _ZN9AllocatorIiLm68EEC2Ev called 1 returned 100% blocks executed 60%
function _ZN9AllocatorIiLm16EEC2Ev called 1 returned 100% blocks executed 60%
function _ZN9AllocatorIiLm60EEC2Ev called 1 returned 100% blocks executed 60%
function _ZN9AllocatorIiLm11EEC2Ev called 1 returned 0% blocks executed 50%
function _ZN9AllocatorIiLm13EEC2Ev called 1 returned 100% blocks executed 60%
function _ZN9AllocatorIiLm12EEC2Ev called 6 returned 100% blocks executed 60%
function _ZN9AllocatorIiLm200EEC2Ev called 1 returned 100% blocks executed 60%
function _ZN9AllocatorIiLm100EEC2Ev called 16 returned 100% blocks executed 60%
       34:  134:        Allocator () {
       34:  135:            if (N < sizeof(T) + (2 * sizeof(int)))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
branch 12 taken 100% (fallthrough)
branch 13 taken 0%
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
branch 16 taken 0% (fallthrough)
branch 17 taken 100%
branch 18 taken 0% (fallthrough)
branch 19 taken 100%
branch 20 taken 0% (fallthrough)
branch 21 taken 100%
        -:  136:            {
        1:  137:                throw std::bad_alloc();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 returned 100%
call   19 returned 100%
call   20 returned 0%
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
        -:  138:            }
       33:  139:            (*this)[0] = N - (2 * sizeof(int));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 never executed
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
call   10 returned 100%
       33:  140:            (*this)[N - sizeof(int)] = N - (2 * sizeof(int));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 never executed
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
call   10 returned 100%
       33:  141:            assert(valid());}
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
call   12 returned 100%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
call   15 never executed
call   16 returned 100%
branch 17 taken 0% (fallthrough)
branch 18 taken 100%
call   19 never executed
call   20 returned 100%
branch 21 taken 0% (fallthrough)
branch 22 taken 100%
call   23 never executed
call   24 never executed
branch 25 never executed
branch 26 never executed
call   27 never executed
call   28 returned 100%
branch 29 taken 0% (fallthrough)
branch 30 taken 100%
call   31 never executed
call   32 returned 100%
branch 33 taken 0% (fallthrough)
branch 34 taken 100%
call   35 never executed
call   36 returned 100%
branch 37 taken 0% (fallthrough)
branch 38 taken 100%
call   39 never executed
call   40 returned 100%
branch 41 taken 0% (fallthrough)
branch 42 taken 100%
call   43 never executed
        -:  142:
        -:  143:        // Default copy, destructor, and copy assignment
        -:  144:        // Allocator  (const Allocator&);
        -:  145:        // ~Allocator ();
        -:  146:        // Allocator& operator = (const Allocator&);
        -:  147:
        -:  148:        // --------
        -:  149:        // allocate
        -:  150:        // --------
        -:  151:
        -:  152:        /**
        -:  153:         * O(1) in space
        -:  154:         * O(n) in time
        -:  155:         * after allocation there must be enough space left for a valid block
        -:  156:         * the smallest allowable block is sizeof(T) + (2 * sizeof(int))
        -:  157:         * choose the first block that fits
        -:  158:         * throw a bad_alloc exception, if n is invalid
        -:  159:         */
function _ZN9AllocatorIdLm100EE8allocateEm called 4 returned 100% blocks executed 71%
function _ZN9AllocatorIdLm16EE8allocateEm called 1 returned 100% blocks executed 53%
function _ZN9AllocatorIiLm36EE8allocateEm called 2 returned 100% blocks executed 74%
function _ZN9AllocatorIiLm68EE8allocateEm called 2 returned 100% blocks executed 74%
function _ZN9AllocatorIiLm16EE8allocateEm called 1 returned 100% blocks executed 53%
function _ZN9AllocatorIiLm60EE8allocateEm called 4 returned 100% blocks executed 74%
function _ZN9AllocatorIiLm12EE8allocateEm called 5 returned 100% blocks executed 53%
function _ZN9AllocatorIiLm100EE8allocateEm called 30 returned 90% blocks executed 85%
       49:  160:        pointer allocate (size_type n) {
        -:  161:            // can't allocate negative sized blocks, throw bad_alloc
        -:  162:            if (n < 0) {
        -:  163:                throw std::bad_alloc();
        -:  164:            }
       49:  165:            if (n == 0) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
    #####:  166:                return nullptr;
        -:  167:            }
       49:  168:            int i = 0;
       49:  169:            bool not_done = true;
      185:  170:            while (i < N && not_done) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 50%
branch  3 taken 50% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 50%
branch  7 taken 50% (fallthrough)
branch  8 taken 100% (fallthrough)
branch  9 taken 0%
branch 10 taken 60%
branch 11 taken 40% (fallthrough)
branch 12 taken 100% (fallthrough)
branch 13 taken 0%
branch 14 taken 60%
branch 15 taken 40% (fallthrough)
branch 16 taken 100% (fallthrough)
branch 17 taken 0%
branch 18 taken 50%
branch 19 taken 50% (fallthrough)
branch 20 taken 100% (fallthrough)
branch 21 taken 0%
branch 22 taken 67%
branch 23 taken 33% (fallthrough)
branch 24 taken 100% (fallthrough)
branch 25 taken 0%
branch 26 taken 50%
branch 27 taken 50% (fallthrough)
branch 28 taken 97% (fallthrough)
branch 29 taken 3%
branch 30 taken 70%
branch 31 taken 30% (fallthrough)
       87:  171:                int s = (*this)[i];
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
       87:  172:                if (s < 0) {  //skips past allocated block
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
branch  4 taken 33% (fallthrough)
branch  5 taken 67%
branch  6 taken 33% (fallthrough)
branch  7 taken 67%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
branch 10 taken 50% (fallthrough)
branch 11 taken 50%
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
branch 14 taken 50% (fallthrough)
branch 15 taken 50%
       37:  173:                    i += -s + (2 * sizeof(int));
        -:  174:                }
       50:  175:                else if (s < (n * sizeof(T))) {  //skips past blocks that are too small
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
branch 14 taken 13% (fallthrough)
branch 15 taken 87%
        4:  176:                    i += s + (2 * sizeof(int));
        -:  177:                }
        -:  178:                else {  //acually allocates space
       46:  179:                    if (s - ( n * sizeof(T) ) < (2 * sizeof(int) + sizeof(T)))  //coalesces blocks that are too small
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 50% (fallthrough)
branch  5 taken 50%
branch  6 taken 50% (fallthrough)
branch  7 taken 50%
branch  8 taken 100% (fallthrough)
branch  9 taken 0%
branch 10 taken 50% (fallthrough)
branch 11 taken 50%
branch 12 taken 100% (fallthrough)
branch 13 taken 0%
branch 14 taken 22% (fallthrough)
branch 15 taken 78%
        -:  180:                    {
       19:  181:                        (*this)[i] = -s;
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
       19:  182:                        (*this)[i + s + sizeof(int)] = -s;
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
        -:  183:                    }
       27:  184:                    else if (s - n == 0)  //simply adapts all the space at the sentinel
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
branch  8 never executed
branch  9 never executed
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
branch 12 never executed
branch 13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
        -:  185:                    {
    #####:  186:                        (*this)[i] = -s;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
    #####:  187:                        (*this)[i + s + sizeof(int)] = -s;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
        -:  188:                    }
        -:  189:                    else {  
       27:  190:                        (*this)[i] = -n * sizeof(T);
call    0 returned 100%
call    1 never executed
call    2 returned 100%
call    3 returned 100%
call    4 never executed
call    5 returned 100%
call    6 never executed
call    7 returned 100%
       27:  191:                        (*this)[i + n * sizeof(T) + sizeof(int)] = -n * sizeof(T);
call    0 returned 100%
call    1 never executed
call    2 returned 100%
call    3 returned 100%
call    4 never executed
call    5 returned 100%
call    6 never executed
call    7 returned 100%
       27:  192:                        (*this)[i + n * sizeof(T) + 2 * sizeof(int)] = s - n * sizeof(T) - (2 * sizeof(int));
call    0 returned 100%
call    1 never executed
call    2 returned 100%
call    3 returned 100%
call    4 never executed
call    5 returned 100%
call    6 never executed
call    7 returned 100%
       27:  193:                        (*this)[i + s + sizeof(int)] = s - n * sizeof(T) - (2 * sizeof(int));
call    0 returned 100%
call    1 never executed
call    2 returned 100%
call    3 returned 100%
call    4 never executed
call    5 returned 100%
call    6 never executed
call    7 returned 100%
        -:  194:                    }
        -:  195:                    
       46:  196:                    not_done = false;
        -:  197:                }
        -:  198:            }
       49:  199:            if (i == N)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
branch 14 taken 10% (fallthrough)
branch 15 taken 90%
        -:  200:            {
        3:  201:                throw std::bad_alloc();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 returned 100%
call   22 returned 100%
call   23 returned 0%
        -:  202:            }
        -:  203:
       46:  204:            assert(valid());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
call   12 returned 100%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
call   15 never executed
call   16 returned 100%
branch 17 taken 0% (fallthrough)
branch 18 taken 100%
call   19 never executed
call   20 returned 100%
branch 21 taken 0% (fallthrough)
branch 22 taken 100%
call   23 never executed
call   24 returned 100%
branch 25 taken 0% (fallthrough)
branch 26 taken 100%
call   27 never executed
call   28 returned 100%
branch 29 taken 0% (fallthrough)
branch 30 taken 100%
call   31 never executed
       46:  205:            return  reinterpret_cast<T*>(&a[i + sizeof(int)]);
        -:  206:        }         
        -:  207:
        -:  208:        // ---------
        -:  209:        // construct
        -:  210:        // ---------
        -:  211:
        -:  212:        /**
        -:  213:         * O(1) in space
        -:  214:         * O(1) in time
        -:  215:         */
function _ZN9AllocatorIiLm100EE9constructEPiRKi called 22 returned 100% blocks executed 75%
function _ZN9AllocatorIdLm100EE9constructEPdRKd called 22 returned 100% blocks executed 75%
       44:  216:        void construct (pointer p, const_reference v) {
       44:  217:            new (p) T(v);                               // this is correct and exempt
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
       44:  218:            assert(valid());}                           // from the prohibition of new
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
        -:  219:
        -:  220:        // ----------
        -:  221:        // deallocate
        -:  222:        // ----------
        -:  223:
        -:  224:        /**
        -:  225:         * O(1) in space
        -:  226:         * O(1) in time
        -:  227:         * after deallocation adjacent free blocks must be coalesced
        -:  228:         * throw an invalid_argument exception, if p is invalid
        -:  229:         * <your documentation>
        -:  230:         */
function _ZN9AllocatorIdLm100EE10deallocateEPdm called 4 returned 100% blocks executed 35%
function _ZN9AllocatorIdLm16EE10deallocateEPdm called 1 returned 100% blocks executed 28%
function _ZN9AllocatorIiLm36EE10deallocateEPim called 2 returned 100% blocks executed 41%
function _ZN9AllocatorIiLm68EE10deallocateEPim called 2 returned 100% blocks executed 40%
function _ZN9AllocatorIiLm12EE10deallocateEPim called 2 returned 100% blocks executed 28%
function _ZN9AllocatorIiLm100EE10deallocateEPim called 11 returned 100% blocks executed 50%
function _ZN9AllocatorIiLm60EE10deallocateEPim called 1 returned 100% blocks executed 35%
       23:  231:        void deallocate (pointer p, size_type n) {
       23:  232:            int b = (int)((char*)p - a); //gets index of pointer in allocator
        -:  233:
       23:  234:            if (b < sizeof(int) || b >= N - sizeof(int)){  //sees that pointer p is within a[N]
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0%
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
branch 12 taken 100% (fallthrough)
branch 13 taken 0%
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
branch 16 taken 100% (fallthrough)
branch 17 taken 0%
branch 18 taken 0% (fallthrough)
branch 19 taken 100%
branch 20 taken 100% (fallthrough)
branch 21 taken 0%
branch 22 taken 0% (fallthrough)
branch 23 taken 100%
branch 24 taken 100% (fallthrough)
branch 25 taken 0%
branch 26 taken 0% (fallthrough)
branch 27 taken 100%
        -:  235:
    #####:  236:                throw std::invalid_argument("Pointer p is invalid");
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
branch 33 never executed
branch 34 never executed
call   35 never executed
branch 36 never executed
branch 37 never executed
call   38 never executed
call   39 never executed
call   40 never executed
call   41 never executed
call   42 never executed
call   43 never executed
call   44 never executed
call   45 never executed
call   46 never executed
call   47 never executed
branch 48 never executed
branch 49 never executed
call   50 never executed
branch 51 never executed
branch 52 never executed
call   53 never executed
call   54 never executed
call   55 never executed
call   56 never executed
call   57 never executed
call   58 never executed
call   59 never executed
call   60 never executed
call   61 never executed
call   62 never executed
branch 63 never executed
branch 64 never executed
call   65 never executed
branch 66 never executed
branch 67 never executed
call   68 never executed
call   69 never executed
call   70 never executed
call   71 never executed
call   72 never executed
call   73 never executed
call   74 never executed
call   75 never executed
call   76 never executed
call   77 never executed
branch 78 never executed
branch 79 never executed
call   80 never executed
branch 81 never executed
branch 82 never executed
call   83 never executed
call   84 never executed
call   85 never executed
call   86 never executed
call   87 never executed
call   88 never executed
call   89 never executed
call   90 never executed
call   91 never executed
call   92 never executed
branch 93 never executed
branch 94 never executed
call   95 never executed
branch 96 never executed
branch 97 never executed
call   98 never executed
call   99 never executed
call   100 never executed
call   101 never executed
call   102 never executed
call   103 never executed
call   104 never executed
        -:  237:            }
        -:  238:
       23:  239:            int& sentinel_1 = (*this)[b - 4];
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
       23:  240:            int e = b + -sentinel_1;
        -:  241:            //checks that sentinel_2 is in a[N] and sentinel_1 is negative
       23:  242:            if (e > N || e < b || sentinel_1 >= 0) {  
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 100% (fallthrough)
branch  9 taken 0%
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
branch 12 taken 100% (fallthrough)
branch 13 taken 0%
branch 14 taken 100% (fallthrough)
branch 15 taken 0%
branch 16 taken 0% (fallthrough)
branch 17 taken 100%
branch 18 taken 100% (fallthrough)
branch 19 taken 0%
branch 20 taken 100% (fallthrough)
branch 21 taken 0%
branch 22 taken 0% (fallthrough)
branch 23 taken 100%
branch 24 taken 100% (fallthrough)
branch 25 taken 0%
branch 26 taken 100% (fallthrough)
branch 27 taken 0%
branch 28 taken 0% (fallthrough)
branch 29 taken 100%
branch 30 taken 100% (fallthrough)
branch 31 taken 0%
branch 32 taken 100% (fallthrough)
branch 33 taken 0%
branch 34 taken 0% (fallthrough)
branch 35 taken 100%
branch 36 taken 100% (fallthrough)
branch 37 taken 0%
branch 38 taken 100% (fallthrough)
branch 39 taken 0%
branch 40 taken 0% (fallthrough)
branch 41 taken 100%
    #####:  243:                throw std::invalid_argument("Pointer p is invalid");
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
branch 33 never executed
branch 34 never executed
call   35 never executed
branch 36 never executed
branch 37 never executed
call   38 never executed
call   39 never executed
call   40 never executed
call   41 never executed
call   42 never executed
call   43 never executed
call   44 never executed
call   45 never executed
call   46 never executed
call   47 never executed
branch 48 never executed
branch 49 never executed
call   50 never executed
branch 51 never executed
branch 52 never executed
call   53 never executed
call   54 never executed
call   55 never executed
call   56 never executed
call   57 never executed
call   58 never executed
call   59 never executed
call   60 never executed
call   61 never executed
call   62 never executed
branch 63 never executed
branch 64 never executed
call   65 never executed
branch 66 never executed
branch 67 never executed
call   68 never executed
call   69 never executed
call   70 never executed
call   71 never executed
call   72 never executed
call   73 never executed
call   74 never executed
call   75 never executed
call   76 never executed
call   77 never executed
branch 78 never executed
branch 79 never executed
call   80 never executed
branch 81 never executed
branch 82 never executed
call   83 never executed
call   84 never executed
call   85 never executed
call   86 never executed
call   87 never executed
call   88 never executed
call   89 never executed
call   90 never executed
call   91 never executed
call   92 never executed
branch 93 never executed
branch 94 never executed
call   95 never executed
branch 96 never executed
branch 97 never executed
call   98 never executed
call   99 never executed
call   100 never executed
call   101 never executed
call   102 never executed
call   103 never executed
call   104 never executed
        -:  244:            }
       23:  245:            int& sentinel_2 = (*this)[e];
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
        -:  246:
       23:  247:            if (sentinel_1 >= 0 || sentinel_2 >= 0 || sentinel_1 != sentinel_2){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 100% (fallthrough)
branch  9 taken 0%
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
branch 12 taken 100% (fallthrough)
branch 13 taken 0%
branch 14 taken 100% (fallthrough)
branch 15 taken 0%
branch 16 taken 0% (fallthrough)
branch 17 taken 100%
branch 18 taken 100% (fallthrough)
branch 19 taken 0%
branch 20 taken 100% (fallthrough)
branch 21 taken 0%
branch 22 taken 0% (fallthrough)
branch 23 taken 100%
branch 24 taken 100% (fallthrough)
branch 25 taken 0%
branch 26 taken 100% (fallthrough)
branch 27 taken 0%
branch 28 taken 0% (fallthrough)
branch 29 taken 100%
branch 30 taken 100% (fallthrough)
branch 31 taken 0%
branch 32 taken 100% (fallthrough)
branch 33 taken 0%
branch 34 taken 0% (fallthrough)
branch 35 taken 100%
branch 36 taken 100% (fallthrough)
branch 37 taken 0%
branch 38 taken 100% (fallthrough)
branch 39 taken 0%
branch 40 taken 0% (fallthrough)
branch 41 taken 100%
    #####:  248:                throw std::invalid_argument("Pointer p is invalid");
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
branch 31 never executed
branch 32 never executed
call   33 never executed
branch 34 never executed
branch 35 never executed
call   36 never executed
call   37 never executed
call   38 never executed
call   39 never executed
call   40 never executed
call   41 never executed
call   42 never executed
call   43 never executed
call   44 never executed
branch 45 never executed
branch 46 never executed
call   47 never executed
branch 48 never executed
branch 49 never executed
call   50 never executed
call   51 never executed
call   52 never executed
call   53 never executed
call   54 never executed
call   55 never executed
call   56 never executed
call   57 never executed
call   58 never executed
branch 59 never executed
branch 60 never executed
call   61 never executed
branch 62 never executed
branch 63 never executed
call   64 never executed
call   65 never executed
call   66 never executed
call   67 never executed
call   68 never executed
call   69 never executed
call   70 never executed
call   71 never executed
call   72 never executed
branch 73 never executed
branch 74 never executed
call   75 never executed
branch 76 never executed
branch 77 never executed
call   78 never executed
call   79 never executed
call   80 never executed
call   81 never executed
call   82 never executed
call   83 never executed
call   84 never executed
call   85 never executed
call   86 never executed
branch 87 never executed
branch 88 never executed
call   89 never executed
branch 90 never executed
branch 91 never executed
call   92 never executed
call   93 never executed
call   94 never executed
call   95 never executed
call   96 never executed
call   97 never executed
        -:  249:            }
        -:  250:
       23:  251:            if (b > sizeof(int)  && (*this)[b - 2 * sizeof(int)] > 0 && e < (N - sizeof(int)) && (*this)[e + sizeof(int)] > 0) { //coalesces free blocks on both sides
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
call   14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
branch 22 taken 0% (fallthrough)
branch 23 taken 100%
branch 24 taken 50% (fallthrough)
branch 25 taken 50%
call   26 returned 100%
branch 27 taken 100% (fallthrough)
branch 28 taken 0%
branch 29 taken 0% (fallthrough)
branch 30 taken 100%
call   31 never executed
branch 32 never executed
branch 33 never executed
branch 34 taken 0% (fallthrough)
branch 35 taken 100%
branch 36 taken 50% (fallthrough)
branch 37 taken 50%
call   38 returned 100%
branch 39 taken 0% (fallthrough)
branch 40 taken 100%
branch 41 never executed
branch 42 never executed
call   43 never executed
branch 44 never executed
branch 45 never executed
branch 46 taken 0% (fallthrough)
branch 47 taken 100%
branch 48 taken 0% (fallthrough)
branch 49 taken 100%
call   50 never executed
branch 51 never executed
branch 52 never executed
branch 53 never executed
branch 54 never executed
call   55 never executed
branch 56 never executed
branch 57 never executed
branch 58 taken 0% (fallthrough)
branch 59 taken 100%
branch 60 taken 45% (fallthrough)
branch 61 taken 55%
call   62 returned 100%
branch 63 taken 20% (fallthrough)
branch 64 taken 80%
branch 65 taken 100% (fallthrough)
branch 66 taken 0%
call   67 returned 100%
branch 68 taken 100% (fallthrough)
branch 69 taken 0%
branch 70 taken 9% (fallthrough)
branch 71 taken 91%
branch 72 taken 100% (fallthrough)
branch 73 taken 0%
call   74 returned 100%
branch 75 taken 0% (fallthrough)
branch 76 taken 100%
branch 77 never executed
branch 78 never executed
call   79 never executed
branch 80 never executed
branch 81 never executed
branch 82 taken 0% (fallthrough)
branch 83 taken 100%
        1:  252:                int oe = b - 2 * sizeof(int);
        1:  253:                int ob = e + sizeof(int);
        1:  254:                int& sentinel_l = (*this)[oe];
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 returned 100%
call    6 never executed
        1:  255:                int& sentinel_r = (*this)[ob];
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 returned 100%
call    6 never executed
        1:  256:                int v = sentinel_l + sentinel_r + -sentinel_1 + 4 * sizeof(int);
        1:  257:                (*this)[oe - sentinel_l - sizeof(int)] = v;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 returned 100%
call    6 never executed
        1:  258:                (*this)[ob + sentinel_r + sizeof(int)] = v;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 returned 100%
call    6 never executed
        1:  259:                sentinel_l = 0;
        1:  260:                sentinel_r = 0;
        1:  261:                sentinel_1 = 0;
        1:  262:                sentinel_2 = 0;
        -:  263:            }
        -:  264:
       22:  265:            else if (b > sizeof(int)  && (*this)[b - 2 * sizeof(int)] > 0) { //coalesces free block behind
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
branch 14 taken 50% (fallthrough)
branch 15 taken 50%
call   16 returned 100%
branch 17 taken 100% (fallthrough)
branch 18 taken 0%
branch 19 taken 50% (fallthrough)
branch 20 taken 50%
branch 21 taken 50% (fallthrough)
branch 22 taken 50%
call   23 returned 100%
branch 24 taken 0% (fallthrough)
branch 25 taken 100%
branch 26 taken 0% (fallthrough)
branch 27 taken 100%
branch 28 taken 0% (fallthrough)
branch 29 taken 100%
call   30 never executed
branch 31 never executed
branch 32 never executed
branch 33 taken 0% (fallthrough)
branch 34 taken 100%
branch 35 taken 40% (fallthrough)
branch 36 taken 60%
call   37 returned 100%
branch 38 taken 0% (fallthrough)
branch 39 taken 100%
branch 40 taken 0% (fallthrough)
branch 41 taken 100%
branch 42 taken 100% (fallthrough)
branch 43 taken 0%
call   44 returned 100%
branch 45 taken 0% (fallthrough)
branch 46 taken 100%
branch 47 taken 0% (fallthrough)
branch 48 taken 100%
        1:  266:                int oe = b - 2 * sizeof(int);
        1:  267:                int& sentinel_3 = (*this)[oe];
call    0 never executed
call    1 never executed
call    2 returned 100%
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
        1:  268:                int& sentinel_4 = (*this)[oe - sentinel_3 - sizeof(int)];
call    0 never executed
call    1 never executed
call    2 returned 100%
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
        1:  269:                int v = -sentinel_1 + sentinel_3 + 2 * sizeof(int);
        1:  270:                sentinel_4 = v;
        1:  271:                sentinel_2 = v;
        1:  272:                sentinel_3 = 0;
        1:  273:                sentinel_1 = 0;
        -:  274:            }
        -:  275:
       21:  276:            else if (e < (N - sizeof(int)) && (*this)[e + sizeof(int)] > 0) //coalesces free block in front
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
branch 14 taken 100% (fallthrough)
branch 15 taken 0%
call   16 returned 100%
branch 17 taken 0% (fallthrough)
branch 18 taken 100%
branch 19 taken 0% (fallthrough)
branch 20 taken 100%
branch 21 taken 50% (fallthrough)
branch 22 taken 50%
call   23 returned 100%
branch 24 taken 100% (fallthrough)
branch 25 taken 0%
branch 26 taken 50% (fallthrough)
branch 27 taken 50%
branch 28 taken 0% (fallthrough)
branch 29 taken 100%
call   30 never executed
branch 31 never executed
branch 32 never executed
branch 33 taken 0% (fallthrough)
branch 34 taken 100%
branch 35 taken 90% (fallthrough)
branch 36 taken 10%
call   37 returned 100%
branch 38 taken 56% (fallthrough)
branch 39 taken 44%
branch 40 taken 50% (fallthrough)
branch 41 taken 50%
branch 42 taken 100% (fallthrough)
branch 43 taken 0%
call   44 returned 100%
branch 45 taken 0% (fallthrough)
branch 46 taken 100%
branch 47 taken 0% (fallthrough)
branch 48 taken 100%
        -:  277:            {
        8:  278:                int ob = e + sizeof(int);
        8:  279:                int& sentinel_3 = (*this)[ob];
call    0 returned 100%
call    1 never executed
call    2 never executed
call    3 returned 100%
call    4 never executed
call    5 returned 100%
call    6 never executed
        8:  280:                int& sentinel_4 = (*this)[ob + sizeof(int) + sentinel_3];
call    0 returned 100%
call    1 never executed
call    2 never executed
call    3 returned 100%
call    4 never executed
call    5 returned 100%
call    6 never executed
        8:  281:                int v = -sentinel_1 + sentinel_3 + 2 * sizeof(int);
        8:  282:                sentinel_1 = v;
        8:  283:                sentinel_4 = v;
        8:  284:                sentinel_3 = 0;
        8:  285:                sentinel_2 = 0;
        -:  286:            }
        -:  287:
        -:  288:            else {
       13:  289:                sentinel_1 = -sentinel_1;
       13:  290:                sentinel_2 = -sentinel_2;
        -:  291:            } 
        -:  292:
        -:  293:            //std::cout << b << std::endl;
       23:  294:            assert(valid());}
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
call   12 returned 100%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
call   15 never executed
call   16 returned 100%
branch 17 taken 0% (fallthrough)
branch 18 taken 100%
call   19 never executed
call   20 returned 100%
branch 21 taken 0% (fallthrough)
branch 22 taken 100%
call   23 never executed
call   24 returned 100%
branch 25 taken 0% (fallthrough)
branch 26 taken 100%
call   27 never executed
        -:  295:
        -:  296:        // -------
        -:  297:        // destroy
        -:  298:        // -------
        -:  299:
        -:  300:        /**
        -:  301:         * O(1) in space
        -:  302:         * O(1) in time
        -:  303:         */
function _ZN9AllocatorIiLm100EE7destroyEPi called 22 returned 100% blocks executed 75%
function _ZN9AllocatorIdLm100EE7destroyEPd called 22 returned 100% blocks executed 75%
function _ZN9AllocatorIdLm16EE7destroyEPd called 1 returned 0% blocks executed 50%
function _ZN9AllocatorIiLm12EE7destroyEPi called 3 returned 0% blocks executed 50%
       48:  304:        void destroy (pointer p) {
        -:  305:            p->~T();               // this is correct
       48:  306:            assert(valid());}
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
call    8 returned 0%
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 returned 0%
branch 13 never executed
branch 14 never executed
call   15 never executed
        -:  307:
        -:  308:        /**
        -:  309:         * O(1) in space
        -:  310:         * O(1) in time
        -:  311:         * It takes the four bytes on top of the reference, turns it into an
        -:  312:         * int, and returns a contant alias to the value at the address
        -:  313:         */
function _ZNK9AllocatorIdLm100EEixEi called 124 returned 100% blocks executed 100%
function _ZNK9AllocatorIdLm16EEixEi called 7 returned 100% blocks executed 100%
function _ZNK9AllocatorIiLm11EEixEi called 0 returned 0% blocks executed 0%
function _ZNK9AllocatorIiLm36EEixEi called 20 returned 100% blocks executed 100%
function _ZNK9AllocatorIiLm68EEixEi called 20 returned 100% blocks executed 100%
function _ZNK9AllocatorIiLm16EEixEi called 7 returned 100% blocks executed 100%
function _ZNK9AllocatorIiLm60EEixEi called 33 returned 100% blocks executed 100%
function _ZNK9AllocatorIiLm13EEixEi called 4 returned 100% blocks executed 100%
function _ZNK9AllocatorIiLm12EEixEi called 37 returned 100% blocks executed 100%
function _ZNK9AllocatorIiLm200EEixEi called 4 returned 100% blocks executed 100%
function _ZNK9AllocatorIiLm100EEixEi called 453 returned 100% blocks executed 100%
      709:  314:        const int& operator [] (int i) const {
      709:  315:            return *reinterpret_cast<const int*>(&a[i]);}};
        -:  316:
        -:  317:#endif // Allocator_h
